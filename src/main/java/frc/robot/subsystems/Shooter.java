// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.ShooterConstants;
import frc.robot.SparkMaxSimulator;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/** */
public class Shooter extends SubsystemBase {

  // private static WPI_TalonSRX Turret = new WPI_TalonSRX(ShooterConstants.TURRET_ADDRESS);
  public CANSparkMax ShooterMotor1 =
      new SparkMaxSimulator(ShooterConstants.ShooterController1, MotorType.kBrushless);
  public CANSparkMax ShooterMotor2 =
      new SparkMaxSimulator(ShooterConstants.ShooterController2, MotorType.kBrushless);

  /*  private static DigitalOutput ledRing = new DigitalOutput(
    ShooterConstants.LedRelay
  );*/

  // private static WPI_TalonSRX Shooter2 = new
  // WPI_TalonSRX(ShooterConstants.SECOND_SHOOTER_ADDRESS);
  // private final AS5600EncoderPwm encoder = new AS5600EncoderPwm(Turret.getSensorCollection());
  // private static DigitalOutput ledRing = new DigitalOutput(ShooterConstants.LED_RELAY_ADDRESS);
  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /** */
  public Shooter() {
    // Turret.configFactoryDefault();
    ShooterMotor1.restoreFactoryDefaults();
    ShooterMotor1.setIdleMode(IdleMode.kBrake);
    ShooterMotor2.restoreFactoryDefaults();
    ShooterMotor2.setIdleMode(IdleMode.kBrake);
    ShooterMotor2.setInverted(true);
    // Shooter2.configFactoryDefault();
    // Turret.configSelectedFeedbackSensor(FeedbackDevice.PulseWidthEncodedPosition);
    // Shooter.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);
    // Shooter.setNeutralMode(NeutralMode.Coast);
    // Shooter.setNeutralMode(NeutralMode.Coast);
    // Shooter2.follow(Shooter);
    // ledRing.set(false);
    /* Config sensor used for Primary PID [Velocity] */
    /*Shooter.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative,
    ShooterConstants.kPIDLoopIdx,
    ShooterConstants.kTimeoutMs); */

    /**
     * Phase sensor accordingly. Positive Sensor Reading should match Green (blinking) Leds on Talon
     */
    // Shooter.setSensorPhase(true);

    /* Config the peak and nominal outputs */
    // Shooter.configNominalOutputForward(0, ShooterConstants.kTimeoutMs);
    // Shooter.configNominalOutputReverse(0, ShooterConstants.kTimeoutMs);
    // Shooter.configPeakOutputForward(1, ShooterConstants.kTimeoutMs);
    // Shooter.configPeakOutputReverse(-1, ShooterConstants.kTimeoutMs);

    /* Config the Velocity closed loop gains in slot0 */
    // Shooter.config_kF(ShooterConstants.kPIDLoopIdx, ShooterConstants.kF,
    // ShooterConstants.kTimeoutMs);
    // Shooter.config_kP(ShooterConstants.kPIDLoopIdx, ShooterConstants.kP,
    // ShooterConstants.kTimeoutMs);
    // Shooter.config_kI(ShooterConstants.kPIDLoopIdx, ShooterConstants.kI,
    // ShooterConstants.kTimeoutMs);
    // Shooter.config_kD(ShooterConstants.kPIDLoopIdx, ShooterConstants.kD,
    // ShooterConstants.kTimeoutMs);
  }

  public void HighShooterStart() {
    ShooterMotor1.set(ShooterConstants.ShooterStartSpeed);
    ShooterMotor2.set(ShooterConstants.ShooterStartSpeed);
  }

  public void MidShooterStart() {
    ShooterMotor1.set(ShooterConstants.MidShooterStartSpeed);
    ShooterMotor2.set(ShooterConstants.MidShooterStartSpeed);
  }

  public void AutoShooterStart() {
    ShooterMotor1.set(ShooterConstants.AutoShooterStartSpeed);
    ShooterMotor2.set(ShooterConstants.AutoShooterStartSpeed);
  }

  public void LowShooterStart() {
    ShooterMotor1.set(ShooterConstants.LowShooterStartSpeed);
    ShooterMotor2.set(ShooterConstants.LowShooterStartSpeed);
  }

  public void ShooterStop() {
    ShooterMotor1.set(ShooterConstants.ShooterStopSpeed);
    ShooterMotor2.set(ShooterConstants.ShooterStopSpeed);
  }

  @Override
  public void periodic() {
    // This method will be called once per scheduler run
    // SmartDashboard.putNumber("Turret Encoder", getMeasurement());
    SmartDashboard.putNumber("Shooter Speed", getShooter1Speed());
    // Line for Shooter1 is not required, as they both will go at the same speed.
    // SmartDashboard.putBoolean("ledRing.get", ledRing.get());
  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

  }

  // Put methods for controlling this subsystem
  // here. Call these from Commands.
  double getShooter1Speed() {
    return ShooterMotor1.getEncoder().getVelocity();
  }

  double getShooter2Speed() {
    return ShooterMotor2.getEncoder().getVelocity();
  }
  // double getMeasurement() {
  //    return encoder.getPwmPosition();
  // }
}
