package frc.robot.subsystems;

// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

// package frc.robot.subsystems;

import edu.wpi.first.wpilibj.AddressableLED;
import edu.wpi.first.wpilibj.AddressableLEDBuffer;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/** */
public class Lights extends SubsystemBase {

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  private AddressableLED m_led;
  private AddressableLEDBuffer m_ledBuffer;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /** */
  public Lights() {
    /*    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    m_led = new AddressableLED(1);

    /// Deals with length of section (10)
    m_ledBuffer = new AddressableLEDBuffer(25);
    m_led.setLength(m_ledBuffer.getLength());

    //  Sets the color (Firewall purple = 15,0,15)
    // "if than" statement to switch between blue and red depending on which alliance we're on

    // be great
    for (var i = 0; i < m_ledBuffer.getLength(); i++) m_ledBuffer.setRGB(i, 15, 0, 15);
    // m_ledBuffer.

    // m_led.setData(m_ledBuffer);
    // m_led.start();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS*/
  }

  @Override
  public void periodic() {
    // This method will be called once per scheduler run
    /*  m_led.setLength(m_ledBuffer.getLength());
    m_led.setData(m_ledBuffer);
    m_led.start();*/
  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run when in simulation

  }
}
  // Put methods for controlling this subsystem
  // here. Call these from Commands.

//   public void write_5607() {
//     int start_addr_offset = 2;
//     // Sets the color (Firewall purple = 15,0,15)
//     int rgb_red = 15;
//     int rgb_green = 0;
//     int rgb_blue = 15;

//     // Use this color to see in the simulator
//     // int rgb_red = 155;
//     // int rgb_green = 155;
//     // int rgb_blue = 155;

//     // Use either leds_to_light or serpentine_leds_to_light array to light your LEDs depending on
//     // the wiring arrangement. Also use the correct for loop below.
//     int leds_to_light[] = {
//       0, 1, 2, 4, 5, 6, 10, 14, 20, 21, 22, 24, 25, 26, 32, 34, 36, 40, 41, 42, 44, 45, 46, 60,
// 61,
//       62, 64, 65, 66, 70, 72, 76, 80, 82, 86, 90, 92, 96, 100, 101, 102, 106
//     };
//     m_led = new AddressableLED(1);

//     /// Deals with length of section (10)
//     m_ledBuffer = new AddressableLEDBuffer(110);
//     m_led.setLength(m_ledBuffer.getLength());

//     m_led.setData(m_ledBuffer);
//     m_led.start();
//     // "if than" statement to switch between blue and red depending on which alliance we're on
//     // be great
//     for (int i = 0; i < leds_to_light.length; ++i) {
//       m_ledBuffer.setRGB(start_addr_offset + leds_to_light[i], rgb_red, rgb_green, rgb_blue);
//     }

//     m_led.setData(m_ledBuffer);
//   }

//   public void write_5607_serpentine() {
//     int start_addr_offset = 2;
//     // Sets the color (Firewall purple = 15,0,15)
//     int rgb_red = 15;
//     int rgb_green = 0;
//     int rgb_blue = 15;

//     // Use this color to see in the simulator
//     // int rgb_red = 155;
//     // int rgb_green = 155;
//     // int rgb_blue = 155;

//     int serpentine_leds_to_light[] = {
//       0, 1, 2, 4, 5, 6, 11, 15, 20, 21, 22, 24, 25, 26, 29, 31, 33, 40, 41, 42, 44, 45, 46, 60,
// 61,
//       62, 64, 65, 66, 69, 73, 75, 80, 82, 86, 89, 93, 95, 100, 101, 102, 106
//     };
//     m_led = new AddressableLED(1);

//     /// Deals with length of section (10)
//     m_ledBuffer = new AddressableLEDBuffer(110);
//     m_led.setLength(m_ledBuffer.getLength());

//     m_led.setData(m_ledBuffer);
//     m_led.start();

//     for (int i = 0; i < serpentine_leds_to_light.length; ++i) {
//       m_ledBuffer.setRGB(
//           start_addr_offset + serpentine_leds_to_light[i], rgb_red, rgb_green, rgb_blue);
//     }

//     m_led.setData(m_ledBuffer);
//   }
// }
